
#test for beta#
#generate data#
##### generate data ####
set.seed(20)
###parameter setting##
n<-200 
simu<-500
###parameter for cure rate##
intercept<-1  
a1<-1
a2<--1
#### parameter for survival model###
b1<--0.5
b2<--1
#### examination times ###
p<-10   # decide the right point
v<-10  # decide the left point
order<-3  #decide the order of i spline
niter<-10000
burnin<-2500
estalpha<-matrix(rep(0,simu*3),nrow = simu)
estbeta<-matrix(rep(0,simu*2),nrow = simu)
aveacc.prob1<-array(rep(0,simu*3),dim = c(simu,3))
aveacc.prob2<-array(rep(0,simu*11),dim=c(simu,11))
generate<-function(n,intercept,a1,a2,b1,b2,p,v)
{
  #n sample size
  #intercept cofficients of cure rate
  #a1,a2     cofficients of cure rate
  #b1,b2     cofficients of PH model
  #p         examination times
  #v         first generate uniform range
  #status    censording indicator, 0-left censored,1-interval censored, 2-right censored
  #L         left point of all objects
  #R         right point of all objects
  #Y         nopossible examination time
  #cure rate indicator
  z1<-rnorm(n,0,1)  #or normal 
  z2<-rbinom(n,1,0.5)  
  linpred<-cbind(1,z1,z2) %*% c(intercept,a1,a2)
  prob<-exp(linpred)/(1+exp(linpred))
  y<-rbinom(n=n, size=1, prob=prob)
  #survival probabilities exponentional(1) and time calculation
  u<-runif(n,0,1)
  x<-cbind(z1,z2)
  time<-qweibull(1-exp(log(u)*exp(-x%*%c(b1,b2))),shape=6,scale=8)
  #time<-rexp(n,exp(x%*%b1))
  ###generate examination times####
  C<-matrix(rep(0,n),ncol = 1)   # all right point of subject
  status<-matrix(rep(0,n),ncol=1)
  L<-matrix(rep(0,n),ncol=1)
  R<-matrix(rep(0,n),ncol=1)
  for(j in 1:n)
  { 
    P<-rpois(1,p)+1   # examination times 
    Y<-matrix(rep(0,P),ncol =1)
    Y[1]<-runif(1,0,v)
    len<-runif(1,1,3)  # decide the length of interval 
    for (i in 2:P) 
    {
      Y[i]<-Y[1]+len*(i-1)  
    }               
    C[j]<-Y[P]
    T<-time*y+C*(1-y) # generate exact failure data
    if(y[j]==0) #cure fraction
    {
      status[j]<-2
      L[j]<-Y[P]
      R[j]<-NA    #(L_i,R_i)=(Y_p, infinite)
    } 
    if(y[j]==1) #uncure fraction
    {
      if(T[j]<Y[1]) 
      {
        status[j]<-0
        L[j]<-0
        R[j]<-Y[1]
      } #left censored, (L_j,R_j)=(0, Y_1)
      
      if(T[j]>Y[P])
      {
        status[j]<-2
        L[j]<-Y[P]
        R[j]<-NA
      }  #right censored,(L_j,R_j)=(Y_p,NA)
      if(T[j]<Y[P]&T[j]>Y[1])
      { status[j]<-1 
      i<-1
      repeat
      {
        i<-i+1
        if(T[j]<Y[i])
        {break}
      }
      L[j]<-Y[i-1]
      R[j]<-Y[i]  # find the interval contain T,(L_j,R_j)=(Y_i-1,Y_i)
      }
    }
  }
  data<-data.frame(T,L,R,status,z1,z2)
  return(data)
}
#library(HI)
Ispline<-function(x,order,knots)
{
  # M Spline function with order k=order+1. or I spline with order
  # x is a row vector
  # k is the order of I spline
  # knots are a sequence of increasing points
  # the number of free parameters in M spline is the length of knots plus 1.
  
  k=order+1
  m=length(knots)
  n=m-2+k # number of parameters
  t=c(rep(1,k)*knots[1], knots[2:(m-1)], rep(1,k)*knots[m]) # newknots
  
  yy1=array(rep(0,(n+k-1)*length(x)),dim=c(n+k-1, length(x)))
  for (l in k:n){
    yy1[l,]=(x>=t[l] & x<t[l+1])/(t[l+1]-t[l])
  }
  
  yytem1=yy1
  for (ii in 1:order){
    yytem2=array(rep(0,(n+k-1-ii)*length(x)),dim=c(n+k-1-ii, length(x)))
    for (i in (k-ii):n){
      yytem2[i,]=(ii+1)*((x-t[i])*yytem1[i,]+(t[i+ii+1]-x)*yytem1[i+1,])/(t[i+ii+1]-t[i])/ii
    }
    yytem1=yytem2
  }
  
  index=rep(0,length(x))
  for (i in 1:length(x)){
    index[i]=sum(t<=x[i])
  }
  
  yy=array(rep(0,(n-1)*length(x)),dim=c(n-1,length(x)))
  
  if (order==1){
    for (i in 2:n){
      yy[i-1,]=(i<index-order+1)+(i==index)*(t[i+order+1]-t[i])*yytem2[i,]/(order+1)
    }
  }else{
    for (j in 1:length(x)){
      for (i in 2:n){
        if (i<(index[j]-order+1)){
          yy[i-1,j]=1
        }else if ((i<=index[j]) && (i>=(index[j]-order+1))){
          yy[i-1,j]=(t[(i+order+1):(index[j]+order+1)]-t[i:index[j]])%*%yytem2[i:index[j],j]/(order+1)
        }else{
          yy[i-1,j]=0
        }
      }
    }
  }
  return(yy)
}
positivepoissonrnd<-function(lambda){ 
  samp = rpois(1, lambda)
  while (samp==0) {
    samp = rpois(1, lambda)
  }
  return(samp)
}
s=1
while(s<simu+1)
{
  data<-generate(n,intercept,a1,a2,b1,b2,p,v)
  
  ### main routine ###
  L=matrix(data$L,ncol=1)
  R=matrix(data$R,ncol=1)
  R2=ifelse(is.na(R),0,R)
  xcov=matrix(c(data$z1,data$z2),ncol=2)
  p=ncol(xcov)
  status=matrix(data$status,ncol=1)
  n=nrow(L)
  u<-L*as.numeric(status==1)+R2*as.numeric(status==0)             
  v<-L*as.numeric(status==2)+R2*as.numeric(status==1)   
  obs=cbind(u,v)
  
  ## generate basis functions
  knots<-seq(min(obs),max(obs),length=10)
  k=length(knots)-2+order
  grids<-seq(min(obs),max(obs),length=100)
  kgrids=length(grids)
  #G<-length(x_user)/p     # number of survival curves
  
  #bibl=Ispline(t(bl.Li),order,knots)
  bisu=Ispline(t(obs[,1]),order,knots)
  bisv=Ispline(t(obs[,2]),order,knots)
  bgs=Ispline(grids,order,knots)
  
  
  beta<-c(-0.5,-1)
  alpha<-c(1,1,-1)        #intial value
  theta=exp(cbind(1,xcov)%*%alpha)/(1+exp(cbind(1,xcov)%*%alpha))
  mu.alpha<-c(0,0,0)       #prior
  s.alpha<-c(100,100,100)  #prior
  prop.s<-c(0.5,0.5,0.5)
  mu.beta<-c(0,0)       #prior
  s.beta<-c(100,100)  #prior
  coef_range<-2
  paralpha=array(rep(0,niter*(p+1)),dim=c(niter,(p+1)))
  parbeta<-array(rep(0,niter*p),dim=c(niter,p))
  
  
  gamcoef=matrix(rgamma(k, 1, 1),ncol=k) #initial value
  a_eta<-matrix(rep(1,k),ncol=k)    #prior
  b_eta<-matrix(rep(1,k),ncol=k)    #prior
  gamma.s<-matrix(c(rep(6,k)),ncol = k)
  acc.prob1<-c(0,0,0)      # accept rate
  acc.prob2<-c(rep(0,k))                 #accept probability
  current.alpha<-alpha
  current.gamma<-gamcoef
  
  
  Lambdatu=t(gamcoef%*%bisu) # n x 1 t_i1
  Lambdatv=t(gamcoef%*%bisv) # n x 1 t_i2
  Lambdatg=t(gamcoef%*%bgs)
  
  
  #sample beta#
  iter=1
  while (iter<niter+1)
  { 
    # sample z, zz, w and ww
    z=array(rep(0,n),dim=c(n,1)); w=z
    #zz=array(rep(0,n*k),dim=c(n,k)); ww=zz
    
    for (i in 1:n){
      if (status[i]==0){
        templam1=Lambdatu[i]*exp(xcov[i,]%*%beta)
        z[i]=positivepoissonrnd(templam1)
        #zz[i,]=rmultinom(1,z[i],gamcoef*t(bisu[,i]))
      }else if (status[i]==1){
        templam1=(Lambdatv[i]-Lambdatu[i])*exp(xcov[i,]%*%beta)
        w[i]=positivepoissonrnd(templam1)
        #ww[i,]=rmultinom(1,w[i],gamcoef*t(bisv[,i]-bisu[,i]))
      }
    }
    for(i in 1:n){
      if(z[i]>100){
        z[i]<-100
      }
    }
    for(i in 1:n){
      if(w[i]>100){
        w[i]<-100
      }
    }  ##avoid the overwhelming of factorial(z) and factorial(w)
    # sample alpha#
    likelihood<-function(alpha,xcov,j,Lambdatu,Lambdatv,beta)
    {
      theta=exp(cbind(1,xcov)%*%alpha)/(1+exp(cbind(1,xcov)%*%alpha))
      lambda1=Lambdatu*exp(xcov%*%beta)
      lambda2=(Lambdatv-Lambdatu)*exp(xcov%*%beta)
      p_z=lambda1^z*exp(-lambda1)/factorial(z)
      p_w=(lambda2^w*exp(-lambda2)/factorial(w))^((status==1)+(status==2))
      loglikelihood<-sum(log(theta*p_z*p_w+(1-theta)*(status==2)))
      posterior<-loglikelihood-alpha[j]^2/s.alpha[j]^2/2
      return(posterior)
    }
    for(j in 1:(p+1))
    {
      prop.alpha<-current.alpha
      prop.alpha[j]<-rnorm(1,current.alpha[j],prop.s[j])   # M-H algorithm, proposal distribution is N(x_t. sig)
      u<-runif(1)
      A<-exp(likelihood(prop.alpha,xcov=xcov,j=j,Lambdatu=Lambdatu,Lambdatv=Lambdatv,beta=beta)-likelihood(current.alpha,xcov=xcov,j=j,Lambdatu=Lambdatu,Lambdatv=Lambdatv,beta=beta))
      if(u<A)
      {
        current.alpha[j]<-prop.alpha[j]
        acc.prob1[j]<-acc.prob1[j]+1  
      }
    }
    
    theta=exp(cbind(1,xcov)%*%current.alpha)/(1+exp(cbind(1,xcov)%*%current.alpha))
    #update theta
    #sample beta#
    beta_fun <- function(x,j,beta,xcov,Lambdatu,Lambdatv,theta,z,w,s.beta)
    {
      beta[j]<-x
      lambda1=Lambdatu*exp(xcov%*%beta)
      lambda2=(Lambdatv-Lambdatu)*exp(xcov%*%beta)
      p_z=lambda1^z*exp(-lambda1)/factorial(z)
      p_w=(lambda2^w*exp(-lambda2)/factorial(w))^((status==1)+(status==2))
      loglikehood_beta<-sum(log(theta*p_z*p_w+(1-theta)*(status==2)))
      logprior_beta<--x^2/s.beta[j]^2/2
      tt<-loglikehood_beta+logprior_beta
      return(tt)
    }
    ind_fun <- function(x,j,beta,xcov,Lambdatu,Lambdatv,theta,z,w,s.beta)
    {(x >-coef_range) * (x < coef_range)}
    for (j in 1:p) {
      beta[j] <- arms(beta[j], beta_fun, ind_fun, 1, j = j, 
                      beta = beta, xcov= xcov,Lambdatu=Lambdatu,Lambdatv=Lambdatv, theta=theta,
                      z=z,w=w, s.beta=s.beta)
    }
    
    #sample gamma
    loga<-function(xcov,beta,gamcoef,bisu,bisv,z,w,status,theta,a_eta,b_eta)
    {
      Lambdatu=t(gamcoef%*%bisu) # n x 1
      Lambdatv=t(gamcoef%*%bisv)
      lambda1=Lambdatu*exp(xcov%*%beta)
      lambda2=(Lambdatv-Lambdatu)*exp(xcov%*%beta)
      p_z=lambda1^z*exp(-lambda1)/factorial(z)
      p_w=(lambda2^w*exp(-lambda2)/factorial(w))^((status==1)+(status==2))
      likehood<-sum(log(theta*p_z*p_w+(1-theta)*(status==2)),na.rm = TRUE) # avoid Nan value
      logprior_gamma<-(a_eta[j]-1)*log(gamcoef[j])-gamcoef[j]/b_eta[j]  #inverse-gamma
      tt<-likehood+logprior_gamma
      return(tt)
    }
    for(j in 1:k)
    {
      prop.gamma<-current.gamma
      repeat{
        prop.gamma[j]<-rnorm(1,current.gamma[j],gamma.s[j])
        if(prop.gamma[j]>0)
          break   #fix the turncated sampler
      }
      u<-runif(1)
      num2<-loga(xcov=xcov,beta=beta,gamcoef=prop.gamma,bisu=bisu,bisv=bisv,z=z,w=w,status=status,theta=theta,a_eta=a_eta,b_eta=b_eta)
      dem2<-loga(xcov=xcov,beta=beta,gamcoef=current.gamma,bisu=bisu,bisv=bisv,z=z,w=w,status=status,theta=theta,a_eta=a_eta,b_eta=b_eta)
      A<-exp(num2-dem2)*pnorm(current.gamma[j])/pnorm(prop.gamma[j]) #fixing the tunecated sampler
      if(u<A)
      {
        current.gamma[j]<-prop.gamma[j]
        acc.prob2[j]<-acc.prob2[j]+1
      }
    }
    gamcoef<-current.gamma     #update
    Lambdatu=t(gamcoef%*%bisu) # n x 1
    Lambdatv=t(gamcoef%*%bisv) # n x 1
    
    paralpha[iter,]<-current.alpha
    parbeta[iter,]<-beta
    iter<-iter+1
  #print(iter)
    
  }
  if(acc.prob1[1]/niter<0.6 & acc.prob1[2]/niter<0.6 & acc.prob1[3]/niter<0.7)
  {
    cat("the accept rate is",acc.prob1/niter, "\n",acc.prob2/niter)
    print(s)
    aveacc.prob1[s,]<-acc.prob1/niter
    aveacc.prob2[s,]<-acc.prob2/niter
    para<-paralpha[seq(burnin+1,niter),]
    par<-parbeta[seq(burnin+1,niter),]
    print(apply(para,2,mean))
    print(apply(par,2,mean))
    estalpha[s,]<-apply(para,2,mean)
    estbeta[s,]<-apply(par,2,mean)
    s<-s+1
  }
  else
  {
    s=s
  }
} 
cat("the ave accpet rate is",apply(aveacc.prob1, 2, mean),apply(aveacc.prob2, 2, mean),"/")
cat(apply(estalpha,2,mean),apply(estbeta,2,mean))
mydata<-data.frame(estalpha,estbeta,aveacc.prob1,aveacc.prob2)
write.csv(mydata,file = "Mydata500.csv")

#try<-ICBayes(model="case2ph",L=data[,2],R=data[,3],status=data[,4],xcov = cbind(data[,5],data[,6]))
\ No newline at end of file
